f = factor(letters[c(1, 1, 2, 2, 3:10)])
length(f)
f
(sum(rownames(installed.packages())=="ggplot2")==0)
sum(rownames(installed.packages())=="ggplot2")==0
rownames(installed.packages())=="ggplot2"
library(ggplot2)
rownames(installed.packages())=="rstan"
rownames(installed.packages())
rownames(installed.packages())=="ggplot2"
sum(rownames(installed.packages())=="ggplot2")
source('E:/zhang/Desktop/BayesCog_package_installation.R')
library(Cairo)
Sys.getenv('PATH')
system('g++ -v')
system('where make')
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR))
dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M))
file.create(M)
cat("\nCXXFLAGS=-O3 -mtune=native -march=native -Wno-unused-variable -Wno-unused-function",
file = M, sep = "\n", append = TRUE)
cat('Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")',
file = file.path(Sys.getenv("HOME"), ".Rprofile"),
sep = "\n", append = TRUE)
cat(readLines(M), sep = "\n")
dotR
file.path(dotR, "Makevars")
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR))
dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M))
file.create(M)
cat("\nCXXFLAGS=-O3 -mtune=native -march=native -Wno-unused-variable -Wno-unused-function",
file = M, sep = "\n", append = TRUE)
cat('Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")',
file = file.path(Sys.getenv("HOME"), ".Rprofile"),
sep = "\n", append = TRUE)
cat(readLines(M), sep = "\n")
cat(M)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
library(rstan)
schools_dat <- list(J = 8,
y = c(28,  8, -3,  7, -1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
fit <- stan(file = 'E:/zhang/Desktop/8schools.stan', data = schools_dat,
iter = 1000, chains = 4)
fit <- stan(file = 'E:/zhang/Desktop/8schools.stan', data = schools_dat,
iter = 1000, chains = 4)
library(rstan)
funnel <- stan_demo("funnel", seed = 12345)
funnel <- stan_demo("funnel", seed = 12345)
funnel <- stan_demo("funnel", seed = 12345)
funnel <- stan_demo("funnel", seed = 12345)
funnel <- stan_demo("funnel", seed = 12345)
pairs(funnel, pars = c("y", "x[1]", "lp__"), las = 1)
print(funnel)
pairs(funnel, pars = c("y", "x[1]", "lp__"))
funnel_reparam <- stan_demo("funnel_reparam")
d = read.table('E:/zhang/Desktop/try.txt', sep = ' ')
d = read.table('E:/zhang/Desktop/try.txt', sep = '\t')
d
d = read.table('E:/zhang/Desktop/try.txt', sep = ' ')
d = read.table('E:/zhang/Desktop/try.txt', sep = '')
d = read.table('E:/zhang/Desktop/try.txt')
d = read.table('E:/zhang/Desktop/try.txt', sep = '')
d = read.table('E:/zhang/Desktop/try.txt', sep = ' ')
d = read.table('E:/zhang/Desktop/try.txt', sep = ' ', stringsAsFactors = F)
d = read.table('E:/zhang/Desktop/try.txt', sep = '\t', stringsAsFactors = F)
d
d[1]
d[1,]
d[2,]
d[,1]
library(rstan)
library(loo)
q()
clc
?qnorm
qnorm(0, 0,1)
qnorm(.5, 0,1)
mean(c(1,2,3,4))
q()
library(rstan)
install.packages("ggplot2")
install.packages('ggthemes')
install.packages("R.matlab")
install.packages("devtools")
install.packages("R.utils")
install.packages("runjags")
install.packages("rjags")
install.packages("car")
install.packages("gdata")
install.packages("plyr")
install.packages("dplyr")
install.packages("lme4")
install.packages("lattice")
install.packages("latticeExtra")
install.packages("modeest")
install.packages("coda")
install.packages("reshape2")
install.packages("BayesFactor")
install.packages("restorepoint")
install.packages("loo")
install.packages("DMwR")
install.packages("ellipse")
install.packages("corrplot")
install.packages("installr")
install.packages("arm")
#install.packages("rstan")
install.packages("shinystan")
install.packages("broom")
install.packages("ez")
install.packages("RWiener")
install.packages("boot")
install.packages("pryr")
install.packages("profvis")
install.packages("rmarkdown")
install.packages("GGally")
install.packages("Cairo") # for better graphics
install.packages("chron") # dealing with date/time
install.packages("microbenchmark") # runtime, performance
install.packages("bayesplot")
install.packages("rms")
install.packages("Hmisc")
install.packages("rmutil")
library(rstan)
library(loo)
R.version
R.version()
stan_version()
library(rstan)
f = readRDS('_outputs/fit_rl_mp_hrch.RData')
? read.csv
data = read.csv('E:/zhang/Desktop/Fund_Huafeng.csv', header = T, sep=';', stringsAsFactors = F)
dat
data
26.1 * 14
49.6 * 9
22.3 * 15
25.11 * 14
data = read.csv('E:/zhang/Desktop/Fund_Huafeng.csv', header = T, sep=';', stringsAsFactors = F)
data
data$Name = as.factor(data$Name)
s_name = unique(data$Name)
s_name
data = read.csv('E:/zhang/Desktop/Fund_Huafeng.csv', header = T, sep=';', stringsAsFactors = F)
#data$Name = as.factor(data$Name)
s_name = unique(data$Name)
s_name
data
s_name = unique(data$Name)
ns = length(s_name)
ns
j
j=1
data_s = data[data$Name == ns[j],]
data_s
ns[j]
data_s = data[data$Name == s_name[j],]
data_s
sum(data_s$singlePrice) / sum(data_s$amount)
sum(data_s$amount)
sum(data_s$singlePrice)
data_s$singlePrice * data_s$amount
sum(data_s$singlePrice * data_s$amount) / sum(data_s$amount)
500 / 47.13
thres
thres  = sum(data_s$singlePrice * data_s$amount) / sum(data_s$amount)
thres
for (t in 1:round(500 / thres)) {
new_thres[t] = sum(data_s$singlePrice * data_s$amount + t * stockPrice[j]) / sum(data_s$amount + t)
}
stockPrice = c(48, 20)
for (t in 1:round(500 / thres)) {
new_thres[t] = sum(data_s$singlePrice * data_s$amount + t * stockPrice[j]) / sum(data_s$amount + t)
}
array(0, c(1, round(500 / thres)))
array(0, c(round(500 / thres)))
new_thres = array(0, c(round(500 / thres)))
for (t in 1:round(500 / thres)) {
new_thres[t] = sum(data_s$singlePrice * data_s$amount + t * stockPrice[j]) / sum(data_s$amount + t)
}
new_thres
data_s
thres
c(round(500 / thres)
)
stockPrice = c(20, 20)
for (t in 1:round(500 / thres)) {
new_thres[t] = sum(data_s$singlePrice * data_s$amount + t * stockPrice[j]) / sum(data_s$amount + t)
}
new_thres
for (t in 1:10) {
new_thres[t] = sum(data_s$singlePrice * data_s$amount + 10 * (t+40)) / sum(data_s$amount + 10)
}
new_thres
plot(t, new_thres)
rm(new_thres)
for (t in 1:10) {
new_thres[t] = sum(data_s$singlePrice * data_s$amount + 10 * (t+40)) / sum(data_s$amount + 10)
}
new_thres = array(0, 10)
for (t in 1:10) {
new_thres[t] = sum(data_s$singlePrice * data_s$amount + 10 * (t+40)) / sum(data_s$amount + 10)
}
plot(t, new_thres)
length(t)
plot(1:10, new_thres)
new_thres
for (t in 1:10) {
new_thres[t] = sum(data_s$singlePrice * data_s$amount + 10 * (t+40)) / sum(data_s$amount + 10)
}
new_thres
new_thres = array(0, length(1:20))
for (t in 1:20) {
new_thres[t] = sum(data_s$singlePrice * data_s$amount + 10 * (t+35)) / sum(data_s$amount + 10)
}
new_thres
stockPrice = c(20, 20)
new_thres = array(0, round(500 / thres))
for (t in 1:round(500 / thres)) {
new_thres[t] = sum(data_s$singlePrice * data_s$amount + t * stockPrice[j]) / sum(data_s$amount + t)
}
new_thres
rstan:::rstudio_stanc("E:/zhang/Desktop/FSIA.stan")
rstan:::rstudio_stanc("E:/zhang/Desktop/FSIA.stan")
rstan:::rstudio_stanc("E:/zhang/Desktop/FSIA.stan")
library(rstan)
? stan
library(ggplot2)
x = rnorm(10)
y = x + rnorm(10, 0, 0.8)
ggplot2::qplot(x,y)
ggplot2::ggplot(x,y)
N = 14
-2 * (log(.6875)* N) + 5 * log(N) / N
-2 * (log(.6775)* N) + 5 * log(N) / N
-2 * (log(.67)* N) + 5 * log(N) / N
-2 * (log(.675)* N) + 5 * log(N) / N
-2 * (log(.671)* N) + 5 * log(N) / N
-2 * (log(.672)* N) + 5 * log(N) / N
-2 * (log(.6701)* N) + 5 * log(N) / N
-2 * (log(.6702)* N) + 5 * log(N) / N
-2 * (log(.66)* N) + 5 * log(N) / N
-2 * (log(.65)* N) + 5 * log(N) / N
-2 * (log(.6505)* N) + 5 * log(N) / N
-2 * (log(.6503)* N) + 5 * log(N) / N
-2 * (log(.6501)* N) + 5 * log(N) / N
-2 * (log(.6508)* N) + 5 * log(N) / N
-2 * (log(.655)* N) + 5 * log(N) / N
-2 * (log(.658)* N) + 5 * log(N) / N
-2 * (log(.652)* N) + 5 * log(N) / N
-2 * (log(.6505)* N) + 5 * log(N) / N
-2 * (log(.6515)* N) + 5 * log(N) / N
-2 * (log(.6525)* N) + 5 * log(N) / N
-2 * (log(.6522)* N) + 5 * log(N) / N
-2 * (log(.6521)* N) + 5 * log(N) / N
-2 * (log(.63)* N) + 5 * log(N) / N
-2 * (log(.6)* N) + 5 * log(N) / N
-2 * (log(.61)* N) + 5 * log(N) / N
-2 * (log(.62)* N) + 5 * log(N) / N
-2 * (log(.615)* N) + 5 * log(N) / N
-2 * (log(.616)* N) + 5 * log(N) / N
-2 * (log(.617)* N) + 5 * log(N) / N
-2 * (log(.618)* N) + 5 * log(N) / N
-2 * (log(.6175)* N) + 5 * log(N) / N
-2 * (log(.6176)* N) + 5 * log(N) / N
-2 * (log(.6177)* N) + 5 * log(N) / N
-2 * (log(.6177)* N) + 5 * log(N)
-2 * (log(.6522)* N) + 5 * log(N)
-2 * (log(.6702)* N) + 5 * log(N)
14
-2 * (log(.6702)* N) + 5 * log(N) / N
-2 * (log(.6702)* N) + 5 * log(N)
-2 * (log(.6522)* N) + 5 * log(N)
-2 * (log(.6522)* N) + 5 * log(N) / N
-2 * (log(.6177)* N) + 5 * log(N)/N
-2 * (log(.6177)* N) + 5 * log(N)
library(rstan)
2794.6 * .75
38000 / 14
96/12
48/12
library(rstan)
library(hBayesDM)
remove.packages("rstantools")
remove.packages("StanHeaders")
remove.packages("Rcpp")
remove.packages("hBayesDM")
remove.packages("pkgbuild")
install.packages('pkgbuild')
pkgbuild::has_build_tools(debug = TRUE)
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, ifelse(.Platform$OS.type == "windows", "Makevars.win", "Makevars"))
if (!file.exists(M)) file.create(M)
cat("\nCXX14FLAGS=-O3 -march=native -mtune=native",
if( grepl("^darwin", R.version$os)) "CXX14FLAGS += -arch x86_64 -ftemplate-depth-256" else
if (.Platform$OS.type == "windows") "CXX11FLAGS=-O3 -march=native -mtune=native" else
"CXX14FLAGS += -fPIC",
file = M, sep = "\n", append = TRUE)
M
M <- file.path(Sys.getenv("HOME"), ".R", ifelse(.Platform$OS.type == "windows", "Makevars.win", "Makevars"))
file.edit(M)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
library(rstan)
library(hBayesDM)
A = 1:5
sex = c('m','f','m','f','f')
class(A)
class(sex)
df = data.frame(subID = A, ses = sex)
df
as.matrix(df)
C = factor('d','d','p','d','p')
C = factor(c('d','d','p','d','p'))
c
C
df = data.frame(subID = A, ses = sex, group = C)
df
df
str(df)
score
score = rnorm(5)
score
df = data.frame(subID = A, ses = sex, group = C, Y = score)
library(lme4)
lmer(Y ~ group : ses + (1|subID), data = df)
lmer(Y ~ group + (1|sex), data = df)
library(lmerTest)
lmer(Y ~ group + (1|sex), data = df)
lmerTest::lmer(Y ~ group + (1|sex), data = df)
library(rstan)
example(stan_model, run.dontrun = TRUE)
x = read.table("E:\OneDrive - studium.uni-hamburg.de\01_life\_certificate\VCM_2019_analysis.txt")
x = read.table("E:\\OneDrive - studium.uni-hamburg.de\\01_life\\_certificate\\VCM_2019_analysis.txt")
x = read.table("E:\\OneDrive - studium.uni-hamburg.de\\01_life\\_certificate\\VCM_2019_analysis.txt")
x = read.table("E:\\OneDrive - studium.uni-hamburg.de\\01_life\\_certificate\\VCM_2019_analysis2.txt")
x
x = read.table("E:\\OneDrive - studium.uni-hamburg.de\\01_life\\_certificate\\VCM_2019_analysis2.txt", header = T)
x
x
library(ggplot2)
g = ggplot(aes(x = Split, y = pace)) + geom_line
g = ggplot(aes(x = Split, y = pace), data=x) + geom_line
g = ggplot(aes(x = Split, y = pace), data=x) + geom_line()
g
x$pace
x$pace = as.character((x$pace)
)
x$pace
minPerGame <- c("4:30","2:20","34:10")
sapply(strsplit(minPerGame,":"),
function(x) {
x <- as.numeric(x)
x[1]+x[2]/60
}
)
minPerGame(x$pace)
sapply(strsplit(x$pace,":"),
function(x) {
x <- as.numeric(x)
x[1]+x[2]/60
}
)
tmp =
sapply(strsplit(x$pace,":"),
function(x) {
x <- as.numeric(x)
x[1]+x[2]/60
}
)
x$pace2 = tmp
g = ggplot(aes(x = Split, y = pace), data=x) + geom_line()
g
g = ggplot(aes(x = Split, y = pace2), data=x) + geom_line()
g
x
R.version()
R.version
rstan::stan_version()
x = c(95859, 94614, 93966, 92970, 92770, 92990 ,92656 , 92409, 92352)
x - max(x)
install.packages('psych')
library(psych)
? cohen.d
cohen.d(sat.act,"gender")
sat.act
head(sat.act)
strsat.act)
str(sat.act)
1468 * 29
1300 * 12
1333.34 * 12
10000 / 7
1350 * 3
248 * .95
q()
library(R.matlab)
? readMat
d = 'E:\\OneDrive - studium.uni-hamburg.de\\projects@uke\\sit_cpt\\_data\\Group_4\\Group_4_exp.mat'
d
D= readMat(d)
D
View(D)
View(D)
D = D$trial
class(D)
dim(D)
D[,,1]
D[,,1]$decision0
a = D[,,1]$decision0
class(a)
dim(a)
a[1,,]
a = D[,,1]$decision0[1,,]
D[,,1]$decision0[1,,]
D[,,1]$decision1[1,,]
D[,,1]$decision2[1,,]
grpID = 4
data_dir = sprintf('E:\\OneDrive - studium.uni-hamburg.de\\projects@uke\\sit_cpt\\_data\\Group_%d\\', grpID);
data_dir
c(data_dir, sprintf('Group_%d_exp.mat', grpID))
paste0(data_dir, sprintf('Group_%d_exp.mat', grpID))
rawData = readMat(paste0(data_dir, sprintf('Group_%d_exp.mat', grpID)))
rawData[,,1]$decision0[1,,]
rawData = rawData$trial;
rawData[,,1]$decision0[1,,]
rawData[,,1]$decision1[1,,]
rawData[,,1]$decision2[1,,]
pwd()
getwd()
R.version
library(loo)
?loo_model_weights
load('Y:\zhangl88\data_seba_for_brms.Rdata')
load('Y:/zhangl88/data_seba_for_brms.Rdata')
View(data_temp)
library(brms)
brm1 <- brm(EMG ~ Drug_group_C * Time_C + (Time_C  | sub),
data = data_temp)
? brm
9.97446e+1271
9.97446e+1271 / 5.524233e+1270
9.97446e1271 / 5.524233e1270
9.97446e1271 / 5.524233e1270
1e5
(9.97446e1271) / (5.524233e1270)
(9.97446e1271) / (5.524233e1270)
1e5000
1e1000
(99.7446) / (5.524233)
? stan_aov
library(rstanarm)
? stan_aov
plogits(0)
plogis(0)
plogis(-5)
?plogis
plogis(-3)
plogis(1)
x = readRDS('Y:/zhangl88/brm1_full.RData')
x$fit@stanmodel
?stan
install.packages("hbayesdm")
install.packages("hbayesdm")
install.packages("hBayesDM")
library(hBayesDM)
install.packages("hBayesDM", dependencies=TRUE)
install.packages("hBayesDM", dependencies = TRUE)
library(rstan)
devtools::install_github("CCS-Lab/hBayesDM")
install.packages("hBayesDM", dependencies=TRUE)
?rey
?ret
library(brms)
as.factor(c('a','a','a','b','b','b'))
group = as.factor(c('A','A','A','A','B','B','B','B'))
group
rnorm(8)
round(rnorm(8),3)
rep(c('A','B'), 2)
rep(c('A','B'), each = 4)
? rep
rstan:::rstudio_stanc("E:/zhang/Desktop/Kanen_2019/213_2019_5325_MOESM3_ESM.stan")
getwd()
setwd("E:/my_paper/code_materials/zhang_lengersdorff_mikus_glaescher_lamm_rl_fitfalls_suggestions")
---
title: "3x3 plots"
output: html_document
---
library(tidyverse)
results = readRDS("sim-results/sim_results_all.rds") %>% bind_rows %>% mutate_at(., c("p","trials"), factor) %>% mutate(., pcorrs = pcorrs*100)
results = readRDS("data/sim-results/sim_results_all.rds") %>% bind_rows %>% mutate_at(., c("p","trials"), factor) %>% mutate(., pcorrs = pcorrs*100)
results = readRDS("data/sim-results/sim_results_all.rds")
results = readRDS("data/sim_results/sim_results_all.rds")
results = readRDS("data/sim_results/sim_results_all.rds") %>% bind_rows %>% mutate_at(., c("p","trials"), factor) %>% mutate(., pcorrs = pcorrs*100)
results = readRDS("data/sim_results/sim_results_all.rds") %>% bind_rows %>% mutate_at(., c("p","trials"), factor) %>% mutate(., pcorrs = pcorrs*100)
results = readRDS("data/sim_results/sim_results_all.rds") %>% bind_rows %>% mutate_at(., c("p","trials"), factor) %>% mutate(., pcorrs = pcorrs*100)
getwd()
results = readRDS("./data/sim_results/sim_results_all.rds") %>% bind_rows %>% mutate_at(., c("p","trials"), factor) %>% mutate(., pcorrs = pcorrs*100)
results = readRDS("./data/sim_results/sim_results_all.rds") %>% bind_rows %>% mutate_at(., c("p","trials"), factor)
results = readRDS("./data/sim_results/sim_results_all.rds") %>% bind_rows
results = readRDS("./data/sim_results/sim_results_all.rds")
results = readRDS("./data/sim_results/sim_results_all.rds")
results = readRDS('./data/sim_results/sim_results_all.rds') %>% bind_rows %>% mutate_at(., c("p","trials"), factor) %>% mutate(., pcorrs = pcorrs*100)
library(tidyverse)
results = readRDS('E:/my_paper/code_materials/zhang_lengersdorff_mikus_glaescher_lamm_rl_fitfalls_suggestions/data/sim_results/sim_results_all.rds') %>% bind_rows %>% mutate_at(., c("p","trials"), factor) %>% mutate(., pcorrs = pcorrs*100)
